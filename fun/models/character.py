# generated by datamodel-codegen:
#   timestamp: 2022-07-13T18:15:57+00:00


from __future__ import annotations

from typing import Optional

import discord
import httpx
import orjson

from melanie import BaseModel, Field, get_image_colors2, get_redis


class Upgrade(BaseModel):
    name: Optional[str]
    value: Optional[str]


class SkillTalent(BaseModel):
    name: Optional[str]
    unlock: Optional[str]
    description: Optional[str]
    upgrades: Optional[list[Upgrade]]
    type: Optional[str]


class PassiveTalent(BaseModel):
    name: Optional[str]
    unlock: Optional[str]
    description: Optional[str]
    level: Optional[int]


class Constellation(PassiveTalent):
    pass


class GenshinCharacter(BaseModel):
    name: Optional[str]
    vision: Optional[str]
    weapon: Optional[str]
    nation: Optional[str]
    affiliation: Optional[str]
    rarity: Optional[int]
    constellation: Optional[str]
    birthday: Optional[str]
    description: Optional[str]
    skill_talents: Optional[list[SkillTalent]] = Field(None, alias="skillTalents")
    passive_talents: Optional[list[PassiveTalent]] = Field(None, alias="passiveTalents")
    constellations: Optional[list[Constellation]]
    vision_key: Optional[str]
    weapon_type: Optional[str]
    api_name: Optional[str]

    async def generate_embed(self) -> discord.Embed:
        lookup = await get_image_colors2(self.splash_img)

        embed = discord.Embed()
        embed.color = lookup.dominant.decimal
        embed.set_image(url=self.splash_img)
        embed.set_thumbnail(url=self.talent_img)
        embed.title = f"{self.name} - {self.affiliation}".lower()
        embed.description = self.description.lower()
        embed.add_field(name="nation", value=self.nation.lower())
        embed.add_field(name="vision", value=self.vision.lower())
        embed.add_field(name="constellation", value=self.constellation.lower())

        embed.add_field(name="weapon", value=self.weapon.lower())
        embed.add_field(name="main attack", value=self.main_attack.name.lower(), inline=False)
        return embed

    @property
    def main_attack(self) -> SkillTalent:
        return self.skill_talents[0]

    @classmethod
    async def from_name(cls, name: str, session: httpx.AsyncClient) -> GenshinCharacter:
        redis = get_redis()

        url = f"https://api.genshin.dev/characters/{name}"
        key = f"genshin_api:{url}"
        data = await redis.get(key)
        if not data:
            data = await session.get(url)
            data = orjson.loads(data.content)
            await redis.set(key, orjson.dumps(data), ex=86400)
        else:
            data = orjson.loads(data)
        cls = cls.parse_obj(data)
        cls.api_name = name
        return cls

    @property
    def splash_img(self) -> str:
        return f"https://api.genshin.dev/characters/{self.api_name.lower()}/gacha-splash"

    @property
    def talent_img(self) -> str:
        return f"https://api.genshin.dev/characters/{self.api_name.lower()}/talent-na"
