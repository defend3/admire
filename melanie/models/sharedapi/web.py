# generated by datamodel-codegen:
#   timestamp: 2022-09-15T21:33:33+00:00


from __future__ import annotations

import subprocess
from enum import auto

from fastapi_utils.enums import StrEnum

from melanie import BaseModel, HttpUrl, alru_cache
from runtimeopt import offloaded


class PuppeteerLoadMethod(StrEnum):
    commit = auto()
    load = auto()
    networkidle = auto()
    domcontentloaded = auto()


class TelegramProfileResponse(BaseModel):
    username: str
    name: str | None
    description: str | None
    url: str | None
    avatar_url: str | None


class Thumbnail(BaseModel):
    width: int | None
    height: int | None


class ImageItem(BaseModel):
    name: str | None
    thumbnail_url: str | None
    date_published: str | None
    is_family_friendly: bool | None
    content_url: str | None
    host_page_url: str | None
    content_size: str | None
    encoding_format: str | None
    host_page_display_url: str | None
    width: int | None
    height: int | None
    host_page_fav_icon_url: str | None
    host_page_domain_friendly_name: str | None
    host_page_discovered_date: str | None
    image_id: str | None
    accent_color: str | None
    embed_color: int | None
    web_search_url: str | None


class ImageSearchResult(BaseModel):
    items: list[ImageItem]
    count: int = 0
    web_search_url: str | None


class ImageSearchRequest(BaseModel):
    query: str
    safe: bool = True


class CountryCurrency(BaseModel):
    code: str | None
    symbol: str | None


class CountryFlag(BaseModel):
    emoji: str | None
    unicode: str | None


class IpScamScore(BaseModel):
    ip: str
    score: str
    risk: str


class IPLookupResultResponse(BaseModel):
    ip: str | None
    fraud_score: IpScamScore | None
    hostname: str | None
    city: str | None
    region: str | None
    country: str | None
    country_name: str | None
    country_flag: CountryFlag | None
    country_currency: CountryCurrency | None
    loc: str | None
    org: str | None
    postal: str | None
    timezone: str | None


@alru_cache(maxsize=None, ttl=9000)
@offloaded
def lookup_ip(addr) -> bytes:
    value = subprocess.check_output(["/usr/local/bin/ipinfo", str(addr), "-j"], timeout=10, start_new_session=True)
    if "err:" in value.decode("UTF-8"):
        value = None
    return value


class ScreenshotResponse(BaseModel):
    url: HttpUrl
