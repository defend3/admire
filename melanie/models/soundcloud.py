# generated by datamodel-codegen:
#   timestamp: 2022-10-04T09:50:39+00:00


from __future__ import annotations

from typing import Any

from melanie.models.base import BaseModel, Field


class Thumbnail(BaseModel):
    id: Any | None
    url: Any | None
    width: Any | None
    height: Any | None
    resolution: Any | None
    preference: Any | None


class HttpHeaders(BaseModel):
    user__agent: Any | None = Field(None, alias="User-Agent")
    accept: Any | None = Field(None, alias="Accept")
    accept__language: Any | None = Field(None, alias="Accept-Language")
    sec__fetch__mode: Any | None = Field(None, alias="Sec-Fetch-Mode")
    authorization: Any | None = Field(None, alias="Authorization")


class Format(BaseModel):
    url: Any | None
    ext: Any | None
    abr: Any | None
    format_id: Any | None
    protocol: Any | None
    preference: Any | None
    vcodec: Any | None
    audio_ext: Any | None
    video_ext: Any | None
    format: Any | None
    resolution: Any | None
    http_headers: HttpHeaders | None


class SoundcloudExtract(BaseModel):
    id: Any | None
    uploader: Any | None
    uploader_id: Any | None
    uploader_url: Any | None
    timestamp: Any | None
    title: Any | None
    description: Any | None
    thumbnails: list[Thumbnail] | None
    duration: float | None
    webpage_url: Any | None
    license: Any | None
    view_count: Any | None
    like_count: Any | None
    comment_count: Any | None
    repost_count: Any | None
    genre: Any | None
    formats: list[Format] | None
    original_url: Any | None
    webpage_url_basename: Any | None
    webpage_url_domain: Any | None
    extractor: Any | None
    extractor_key: Any | None
    playlist: Any | None
    playlist_index: Any | None
    thumbnail: Any | None
    display_id: Any | None
    fulltitle: Any | None
    duration_string: Any | None
    upload_date: Any | None
    requested_subtitles: Any | None
    _has_drm: Any | None
    url: Any | None
    ext: Any | None
    abr: Any | None
    format_id: Any | None
    protocol: Any | None
    preference: Any | None
    vcodec: Any | None
    audio_ext: Any | None
    video_ext: Any | None
    format: Any | None
    resolution: Any | None
    http_headers: HttpHeaders | None

    @property
    def best_stream(self):
        http_aac = next((x for x in self.formats if x.ext == "aac" and x.format_id == "http_aac_256"), None)

        if not http_aac:
            hls_aac = next((x for x in self.formats if x.ext == "aac" and x.format_id == "hls_aac_256"), None)

            if not hls_aac:
                mp3_basic = next(filter(lambda x: x.ext == "ext"), None)
        return http_aac or http_aac or hls_aac or mp3_basic
